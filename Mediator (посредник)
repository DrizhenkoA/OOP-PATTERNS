#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

class User;
class ChatMediator;

class User{
protected:
    string name;
    ChatMediator* mediator;
public:
    User(string name, ChatMediator* mediator) : name(name),mediator(mediator) {}
    virtual ~User() = default;
    virtual void send(string mes) = 0;
    virtual void receive(string mes) = 0;
};



class ChatMediator {
public:
    virtual void sendMessage(string mes, User* user ) = 0;
    virtual void addUser(User* user) = 0;

};

class ConcreteChatMediator : public ChatMediator {
private:
    vector<User*> users;
public:
    void addUser(User* user) override {
        users.push_back(user);
    }
    void sendMessage(string mes, User* user) {
        for (User* u : users) {
            if (u != user) {
                u->receive(mes);
            }
        }
    }
};


class ConcreteUser : public User {
public:
    ConcreteUser(string name, ChatMediator* mediator) : User(name, mediator) {}
    void send(string mes) override {
        cout << name << " sends: " << mes << endl << endl;
        mediator->sendMessage(mes, this);
    }

    void receive(string mes) {
        cout << name << " received: " << mes << endl;
    }
};
int main()
{
    ConcreteChatMediator* mediator = new ConcreteChatMediator();
    User* user1 = new ConcreteUser("daun",mediator);
    User* user2 = new ConcreteUser("iblan", mediator);
    User* user3 = new ConcreteUser("pedoraz", mediator);
    User* user4 = new ConcreteUser("xyecoc", mediator);

    mediator->addUser(user1);
    mediator->addUser(user2);
    mediator->addUser(user3);
    mediator->addUser(user4);

    user1->send("PRIVET");

}
