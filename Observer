#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

class Observer {
public:
    virtual ~Observer() = default;
    virtual void update(string magazineIssue) = 0;
};

class Subject {
public:
    virtual ~Subject() = default;
    virtual void addObserver(Observer* o) = 0;
    virtual void removeObserver(Observer* o) = 0;
    virtual void notifyObservers() = 0;
};

class MagazinePublisher : public Subject {
private:
    vector<Observer*> observers;
    string latestIssue;
public:
    void addObserver(Observer* o) override {
        observers.push_back(o);
    }
    void removeObserver(Observer* o) override {
        observers.erase(remove(observers.begin(),observers.end(),o),observers.end());
    }
    void notifyObservers() override {
        for (auto observer : observers) {
            observer->update(latestIssue);
        }
    }
    void releseNewIssue(string issue) {
        latestIssue = issue;
        notifyObservers();
    }
};

class Subscriber : public Observer {
private:
    string name;
public:
    Subscriber(string name) : name(name) {}
    void update(string magazineIssue) {
        cout << "Subscriber " << name << " recived new magazine issue " << magazineIssue << endl;
    }
};

int main()
{
    Subscriber* sub1 = new Subscriber("anton");
    Subscriber* sub2 = new Subscriber("ewe");
    Subscriber* sub3 = new Subscriber("xx");
    Subscriber* sub4 = new Subscriber("qwe");
    Subscriber* sub5 = new Subscriber("hgn");

    MagazinePublisher* mag = new MagazinePublisher();
    mag->addObserver(sub1);
    mag->addObserver(sub4);
    mag->addObserver(sub5);
    
    mag->releseNewIssue("new news");
    cout << endl << endl;
    mag->notifyObservers();
}
